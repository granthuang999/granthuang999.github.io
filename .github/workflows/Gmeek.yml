name: build Gmeek

on:
  workflow_dispatch:
  issues:
    types: [opened, edited]
  schedule:
    - cron: "0 16 * * *"
    
jobs:
  build:
    name: Generate blog
    runs-on: ubuntu-latest
    if: ${{ github.event.repository.owner.id == github.event.sender.id || github.event_name == 'schedule' }}
    permissions: write-all
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Get config.json
        run: |
          echo "====== check config.json file ======"
          cat config.json
          echo "====== check config.json end ======"
          sudo apt-get install -y jq

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.8

      - name: Clone Gmeek Theme
        run: |
          echo "Cloning the Gmeek theme from https://github.com/granthuang999/Gmeek..."
          git clone https://github.com/granthuang999/Gmeek.git /opt/Gmeek

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r /opt/Gmeek/requirements.txt

      - name: Generate new html
        run: |
          echo "Forcefully removing the original 'static' file to prevent conflict..."
          rm -f /opt/Gmeek/static
          
          echo "Applying customizations from this repository over the base theme..."
          cp -r ./* /opt/Gmeek/
          
          echo "Running the Gmeek script..."
          cd /opt/Gmeek/
          python Gmeek.py ${{ secrets.GITHUB_TOKEN }} ${{ github.repository }} --issue_number '${{ github.event.issue.number }}'
          
          echo "Copying ads.txt to the output directory..."
          if [ -f "/opt/Gmeek/ads.txt" ]; then
            cp /opt/Gmeek/ads.txt /opt/Gmeek/docs/ads.txt
          fi
          
          echo "Copying robots.txt to the output directory..."
          if [ -f "/opt/Gmeek/robots.txt" ]; then
            cp /opt/Gmeek/robots.txt /opt/Gmeek/docs/robots.txt
          fi
          
          echo "Copying generated files back to the workspace..."
          cp -a /opt/Gmeek/docs/. ${{ github.workspace }}/docs/
          cp -a /opt/Gmeek/backup/. ${{ github.workspace }}/backup/
          cp /opt/Gmeek/blogBase.json ${{ github.workspace }}/
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Index site with Pagefind
        run: |
          echo "Indexing content with Pagefind..."
          npx -y pagefind --site docs

      - name: Prepare URL list for Submission
        id: prepare_urls
        run: |
          echo "Preparing URL list for search engines..."
          URL_LIST_FILE="urls.txt"
          echo "https://www.futuremedia.work/" > $URL_LIST_FILE
          find docs -name "*.html" | sed 's|docs/|https://www.futuremedia.work/|' >> $URL_LIST_FILE
          echo "--- URL list to be submitted ---"
          cat $URL_LIST_FILE
          echo "--------------------------------"
          echo "url_file=$URL_LIST_FILE" >> $GITHUB_OUTPUT

      - name: Submit URLs to Baidu
        if: ${{ secrets.BAIDU_TOKEN }}
        run: |
          echo "Submitting URLs to Baidu API..."
          curl -H 'Content-Type:text/plain' --data-binary @${{ steps.prepare_urls.outputs.url_file }} "http://data.zz.baidu.com/urls?site=https://www.futuremedia.work&token=${{ secrets.BAIDU_TOKEN }}"

      - name: Submit URLs to Bing (IndexNow)
        if: ${{ secrets.BING_API_KEY }}
        run: |
          echo "Submitting URLs to Bing IndexNow API..."
          URL_LIST=$(cat ${{ steps.prepare_urls.outputs.url_file }})
          JSON_PAYLOAD=$(jq -n --arg host "www.futuremedia.work" --arg key "${{ secrets.BING_API_KEY }}" --argjson urls "$(echo "$URL_LIST" | jq -R . | jq -s .)" '{host: $host, key: $key, keyLocation: "https://www.futuremedia.work/${{ secrets.BING_API_KEY }}.txt", urlList: $urls}')
          curl -X POST -H "Content-Type: application/json; charset=utf-8" --data "$JSON_PAYLOAD" "https://api.indexnow.org/indexnow"
      
      # [Êñ∞Â¢û] ‰∏∫ Google API ËÆæÁΩÆËÆ§ËØÅ
      - name: Authenticate to Google Cloud
        if: ${{ secrets.GOOGLE_API_KEY_JSON }}
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GOOGLE_API_KEY_JSON }}'

      - name: Submit URLs to Google
        if: ${{ secrets.GOOGLE_API_KEY_JSON }}
        run: |
          echo "Submitting URLs to Google Indexing API..."
          URL_LIST=$(cat ${{ steps.prepare_urls.outputs.url_file }})
          ACCESS_TOKEN=$(gcloud auth print-access-token)
          for url in $URL_LIST; do
            echo "Submitting URL: $url"
            curl -X POST -H "Authorization: Bearer $ACCESS_TOKEN" -H "Content-Type: application/json" \
            --data "{\"url\":\"$url\",\"type\":\"URL_UPDATED\"}" \
            "https://indexing.googleapis.com/v3/urlNotifications:publish" || echo "Failed to submit $url to Google, continuing..."
          done

      - name: update html
        run: |
          cd ${{ github.workspace }}
          git config --local user.email "$(jq -r ".email" config.json)"
          git config --local user.name "${{ github.repository_owner }}"
          mkdir -p docs
          mkdir -p backup
          git add .
          git commit -a -m 'üéâ auto update by Gmeek action' || echo "nothing to commit"
          git push || echo "nothing to push"
          sleep 3
          
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs/'
          
  deploy:
    name: Deploy blog
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      pages: write
      id-token: write
    concurrency:
      group: "pages"
      cancel-in-progress: false
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
