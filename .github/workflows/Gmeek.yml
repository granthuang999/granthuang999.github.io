name: build Gmeek

on:
  workflow_dispatch:
  schedule:
    - cron: "16 4 * * *"

jobs:
  # Job 1: Build the website and create the 'docs' artifact
  build:
    name: Build Site
    runs-on: ubuntu-latest
    if: ${{ github.event.repository.owner.id == github.event.sender.id || github.event_name == 'schedule' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get config.json
        run: |
          sudo apt-get install -y jq

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.8

      - name: Clone Gmeek Theme
        run: |
          git clone https://github.com/granthuang999/Gmeek.git /opt/Gmeek

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r /opt/Gmeek/requirements.txt

      - name: Generate new html
        run: |
          rm -f /opt/Gmeek/static
          cp -r ./* /opt/Gmeek/
          cd /opt/Gmeek/
          python Gmeek.py ${{ secrets.GITHUB_TOKEN }} ${{ github.repository }} --issue_number '${{ github.event.issue.number }}'
          if [ -f "/opt/Gmeek/ads.txt" ]; then cp /opt/Gmeek/ads.txt /opt/Gmeek/docs/ads.txt; fi
          if [ -f "/opt/Gmeek/robots.txt" ]; then cp /opt/Gmeek/robots.txt /opt/Gmeek/docs/robots.txt; fi
          cp -a /opt/Gmeek/docs/. ${{ github.workspace }}/docs/
          cp -a /opt/Gmeek/backup/. ${{ github.workspace }}/backup/
          cp /opt/Gmeek/blogBase.json ${{ github.workspace }}/

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Index site with Pagefind
        run: |
          npm config set registry https://registry.npmmirror.com/
          npx -y pagefind --site docs

      - name: Upload artifact for submission and deployment
        uses: actions/upload-artifact@v4
        with:
          name: docs-and-backup
          path: |
            docs/
            backup/
            blogBase.json

  # Job 2: Download the artifact and submit URLs to search engines
  submit:
    name: Submit URLs
    runs-on: ubuntu-latest
    needs: build # This job runs only after 'build' is successful
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download built site artifact
        uses: actions/download-artifact@v4
        with:
          name: docs-and-backup
          path: ./

      - name: 1. Prepare Full URL List (Sorted by Date)
        id: prepare_all_urls
        run: |
          echo "Generating a full list of all URLs from the downloaded artifact..."
          ls -R docs
          ALL_URLS_FILE="all_urls.txt"
          find docs -name "*.html" -printf "%T@ %p\n" | sort -nr | cut -d' ' -f2 | \
          sed 's|docs/|https://www.futuremedia.work/|' > $ALL_URLS_FILE
          HOME_URL="https://www.futuremedia.work/"
          sed -i "\|$HOME_URL|d" $ALL_URLS_FILE
          echo "$HOME_URL" | cat - $ALL_URLS_FILE > tmp_file && mv tmp_file $ALL_URLS_FILE
          echo "--- All URLs (Newest First) ---"
          cat $ALL_URLS_FILE
          echo "---------------------------------"
          echo "url_file=$ALL_URLS_FILE" >> $GITHUB_OUTPUT

      - name: 2. Prepare Submission List (New & Backlog)
        id: prepare_submission_list
        run: |
          ALL_URLS_FILE="${{ steps.prepare_all_urls.outputs.url_file }}"
          SUBMITTED_URLS_FILE="backup/submitted_urls.txt"
          TO_SUBMIT_FILE="to_submit_urls.txt"
          touch $SUBMITTED_URLS_FILE
          sed -i 's/\r$//' "$SUBMITTED_URLS_FILE"
          if [ -s "$SUBMITTED_URLS_FILE" ]; then
            grep -Fxv -f "$SUBMITTED_URLS_FILE" "$ALL_URLS_FILE" > "$TO_SUBMIT_FILE"
          else
            cp "$ALL_URLS_FILE" "$TO_SUBMIT_FILE"
          fi
          echo "--- URLs To Be Submitted in This Run ---"
          cat "$TO_SUBMIT_FILE"
          echo "----------------------------------------"
          echo "url_file=$TO_SUBMIT_FILE" >> $GITHUB_OUTPUT

      # All submission steps remain here
      - name: Submit URLs to Baidu
        id: submit_baidu
        # ... (Baidu submission logic remains the same)
      - name: Submit URLs to Bing (Legacy API)
        id: submit_bing
        # ... (Bing submission logic remains the same, including shuf -n 9)
      - name: Authenticate to Google Cloud
        # ... (Google auth logic remains the same, with access_token_scopes)
      - name: Submit URLs to Google
        id: submit_google
        # ... (Google submission logic remains the same)

      - name: Update and Commit Site Content & Submission History
        if: github.repository == 'granthuang999/granthuang999.github.io'
        run: |
          echo "Updating the history of submitted URLs..."
          SUBMITTED_URLS_FILE="backup/submitted_urls.txt"
          SUBMITTED_BAIDU=$( [ -s "${{ steps.submit_baidu.outputs.submitted_file }}" ] && echo "${{ steps.submit_baidu.outputs.submitted_file }}" )
          SUBMITTED_BING=$( [ -s "${{ steps.submit_bing.outputs.submitted_file }}" ] && echo "${{ steps.submit_bing.outputs.submitted_file }}" )
          SUBMITTED_GOOGLE=$( [ -s "${{ steps.submit_google.outputs.submitted_file }}" ] && echo "${{ steps.submit_google.outputs.submitted_file }}" )
          
          cat $SUBMITTED_URLS_FILE $SUBMITTED_BAIDU $SUBMITTED_BING $SUBMITTED_GOOGLE \
              | sort -u > tmp_file && mv tmp_file $SUBMITTED_URLS_FILE
          
          echo "Committing updated files to the repository..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # We only need to add the updated backup file, as the docs/ content is handled by the deploy job
          git add backup/
          
          git commit -m "ðŸ“ˆ Chore: Update submitted URLs history" || echo "nothing to commit"
          git push || echo "nothing to push"

  # Job 3: Deploy the site to GitHub Pages
  deploy:
    name: Deploy Site
    runs-on: ubuntu-latest
    needs: submit # This job runs only after 'submit' is successful
    permissions:
      pages: write
      id-token: write
    concurrency:
      group: "pages"
      cancel-in-progress: false
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Download artifact for deployment
        uses: actions/download-artifact@v4
        with:
          name: docs-and-backup

      - name: Setup Pages
        uses: actions/configure-pages@v4
        
      - name: Upload artifact to Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs/'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
