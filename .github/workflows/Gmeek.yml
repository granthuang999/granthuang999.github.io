name: build Gmeek

on:
  workflow_dispatch:
  schedule:
    # It is recommended to run this once a day to better manage API quotas.
    - cron: "16 4 * * *"
    
jobs:
  build:
    name: Generate and Submit
    runs-on: ubuntu-latest
    if: ${{ github.event.repository.owner.id == github.event.sender.id || github.event_name == 'schedule' }}
    permissions: write-all
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # A full git history is needed to commit the submitted URLs list back to the repo.
          fetch-depth: 0

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Get config.json
        run: |
          echo "====== check config.json file ======"
          cat config.json
          echo "====== check config.json end ======"
          sudo apt-get install -y jq

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.8

      - name: Clone Gmeek Theme
        run: |
          echo "Cloning the Gmeek theme from https://github.com/granthuang999/Gmeek..."
          git clone https://github.com/granthuang999/Gmeek.git /opt/Gmeek

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install -r /opt/Gmeek/requirements.txt

      - name: Generate new html
        run: |
          echo "Forcefully removing the original 'static' file to prevent conflict..."
          rm -f /opt/Gmeek/static
          
          echo "Applying customizations from this repository over the base theme..."
          cp -r ./* /opt/Gmeek/
          
          echo "Running the Gmeek script..."
          cd /opt/Gmeek/
          python Gmeek.py ${{ secrets.GITHUB_TOKEN }} ${{ github.repository }} --issue_number '${{ github.event.issue.number }}'
          
          echo "Copying ads.txt to the output directory..."
          if [ -f "/opt/G-meek/ads.txt" ]; then
            cp /opt/Gmeek/ads.txt /opt/Gmeek/docs/ads.txt
          fi
          
          echo "Copying robots.txt to the output directory..."
          if [ -f "/opt/Gmeek/robots.txt" ]; then
            cp /opt/Gmeek/robots.txt /opt/Gmeek/docs/robots.txt
          fi
          
          echo "Copying generated files back to the workspace..."
          cp -a /opt/Gmeek/docs/. ${{ github.workspace }}/docs/
          cp -a /opt/Gmeek/backup/. ${{ github.workspace }}/backup/
          cp /opt/Gmeek/blogBase.json ${{ github.workspace }}/
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Index site with Pagefind
        run: |
          echo "Setting up npm registry mirror..."
          npm config set registry https://registry.npmmirror.com/
          echo "Indexing content with Pagefind..."
          npx -y pagefind --site docs

      # --- Start of Optimized URL Submission Logic ---

      - name: 1. Prepare Full URL List (Sorted by Date)
        id: prepare_all_urls
        run: |
          echo "Generating a full list of all URLs, sorted by modification date..."
          ALL_URLS_FILE="all_urls.txt"
          # Sorts all .html files by modification time (newest first).
          find docs -name "*.html" -printf "%T@ %p\n" | sort -nr | cut -d' ' -f2 | \
          sed 's|docs/|https://www.futuremedia.work/|' > $ALL_URLS_FILE

          # Ensures the homepage is always at the top of the list for priority.
          HOME_URL="https://www.futuremedia.work/"
          sed -i "\|$HOME_URL|d" $ALL_URLS_FILE
          echo "$HOME_URL" | cat - $ALL_URLS_FILE > tmp_file && mv tmp_file $ALL_URLS_FILE

          echo "--- All URLs (Newest First) ---"
          cat $ALL_URLS_FILE
          echo "---------------------------------"
          echo "url_file=$ALL_URLS_FILE" >> $GITHUB_OUTPUT

      - name: 2. Prepare Submission List (New & Backlog)
        id: prepare_submission_list
        run: |
          ALL_URLS_FILE="${{ steps.prepare_all_urls.outputs.url_file }}"
          SUBMITTED_URLS_FILE="backup/submitted_urls.txt"
          TO_SUBMIT_FILE="to_submit_urls.txt"

          mkdir -p backup
          touch $SUBMITTED_URLS_FILE

          echo "Calculating URLs to be submitted (All URLs - Already Submitted URLs)..."
          # Creates a list of URLs that have not been submitted before.
          comm -23 <(sort "$ALL_URLS_FILE") <(sort "$SUBMITTED_URLS_FILE") > "$TO_SUBMIT_FILE"
          
          echo "--- URLs To Be Submitted in This Run (Priority: New > Backlog) ---"
          cat "$TO_SUBMIT_FILE"
          echo "------------------------------------------------------------------"
          echo "url_file=$TO_SUBMIT_FILE" >> $GITHUB_OUTPUT

      - name: Submit URLs to Baidu
        id: submit_baidu
        env:
          BAIDU_TOKEN: ${{ secrets.BAIDU_TOKEN }}
        if: env.BAIDU_TOKEN != '' && steps.prepare_submission_list.outputs.url_file != ''
        run: |
          echo "Submitting URLs to Baidu API..."
          # Submits up to the top 2000 URLs from the to-do list.
          URLS_TO_SUBMIT_FILE="baidu_urls.txt"
          head -n 2000 ${{ steps.prepare_submission_list.outputs.url_file }} > $URLS_TO_SUBMIT_FILE
          
          if [ -s $URLS_TO_SUBMIT_FILE ]; then
            curl -H 'Content-Type:text/plain' --data-binary @$URLS_TO_SUBMIT_FILE "http://data.zz.baidu.com/urls?site=https://www.futuremedia.work&token=${{ env.BAIDU_TOKEN }}"
            echo "submitted_file=$URLS_TO_SUBMIT_FILE" >> $GITHUB_OUTPUT
          else
            echo "No new URLs to submit to Baidu."
          fi

      - name: Submit URLs to Bing (Legacy API)
        id: submit_bing
        env:
          BING_API_KEY: ${{ secrets.BING_API_KEY }}
        if: env.BING_API_KEY != '' && steps.prepare_submission_list.outputs.url_file != ''
        run: |
          echo "Submitting URLs to Bing's direct Content Submission API..."
          URLS_TO_SUBMIT_FILE="bing_urls.txt"
          # Submits up to the top 200 URLs from the to-do list.
          head -n 200 ${{ steps.prepare_submission_list.outputs.url_file }} > $URLS_TO_SUBMIT_FILE

          if [ ! -s $URLS_TO_SUBMIT_FILE ]; then
            echo "No new URLs to submit to Bing."
            exit 0
          fi
          
          URL_LIST=$(cat $URLS_TO_SUBMIT_FILE)
          BING_API_ENDPOINT="https://ssl.bing.com/webmaster/api.svc/json/SubmitUrl?apikey=${{ env.BING_API_KEY }}"
          for url in $URL_LIST; do
            echo "Submitting URL: $url"
            JSON_PAYLOAD="{\"siteUrl\":\"https://www.futuremedia.work\",\"url\":\"$url\"}"
            curl -X POST -H "Content-Type: application/json; charset=utf-8" --data "$JSON_PAYLOAD" "$BING_API_ENDPOINT" || echo "Failed to submit $url to Bing, continuing..."
          done
          echo "submitted_file=$URLS_TO_SUBMIT_FILE" >> $GITHUB_OUTPUT

      - name: Authenticate to Google Cloud
        env:
          GOOGLE_API_KEY_JSON: ${{ secrets.GOOGLE_API_KEY_JSON }}
        if: env.GOOGLE_API_KEY_JSON != ''
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_API_KEY_JSON }}

      - name: Submit URLs to Google
        id: submit_google
        env:
          GOOGLE_API_KEY_JSON: ${{ secrets.GOOGLE_API_KEY_JSON }}
        if: env.GOOGLE_API_KEY_JSON != '' && steps.prepare_submission_list.outputs.url_file != ''
        run: |
          echo "Submitting URLs to Google Indexing API..."
          URLS_TO_SUBMIT_FILE="google_urls.txt"
          # Submits up to the top 100 URLs (Google's quota is often the strictest).
          head -n 100 ${{ steps.prepare_submission_list.outputs.url_file }} > $URLS_TO_SUBMIT_FILE

          if [ ! -s $URLS_TO_SUBMIT_FILE ]; then
            echo "No new URLs to submit to Google."
            exit 0
          fi

          URL_LIST=$(cat $URLS_TO_SUBMIT_FILE)
          ACCESS_TOKEN=$(gcloud auth print-access-token --scopes=https://www.googleapis.com/auth/indexing)
          for url in $URL_LIST; do
            echo "Submitting URL: $url"
            curl -X POST -H "Authorization: Bearer $ACCESS_TOKEN" -H "Content-Type: application/json" \
            --data "{\"url\":\"$url\",\"type\":\"URL_UPDATED\"}" \
            "https://indexing.googleapis.com/v3/urlNotifications:publish" || echo "Failed to submit $url to Google, continuing..."
          done
          echo "submitted_file=$URLS_TO_SUBMIT_FILE" >> $GITHUB_OUTPUT
      
      - name: 3. Update and Commit Submitted URLs History
        run: |
          echo "Updating the history of submitted URLs..."
          SUBMITTED_URLS_FILE="backup/submitted_urls.txt"
          
          # Adds the URLs submitted in this run to the historical record.
          cat ${{ steps.submit_baidu.outputs.submitted_file }} \
              ${{ steps.submit_bing.outputs.submitted_file }} \
              ${{ steps.submit_google.outputs.submitted_file }} \
              $SUBMITTED_URLS_FILE | sort -u > tmp_file && mv tmp_file $SUBMITTED_URLS_FILE
              
          echo "Committing updated history file to the repository..."
          cd ${{ github.workspace }}
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add $SUBMITTED_URLS_FILE
          # Commits the updated history file only if it has changed.
          git diff --quiet --exit-code $SUBMITTED_URLS_FILE || git commit -m "ðŸ“ˆ Chore: Update submitted URLs history"
          
          # Pushing all changes, including the history file and any blog updates.
          # The original "update html" step is now integrated here for efficiency.
          git add docs/ backup/ blogBase.json
          git commit -a -m 'ðŸŽ‰ auto update by Gmeek action' || echo "nothing to commit"
          git push || echo "nothing to push"

      # --- End of Optimized URL Submission Logic ---

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: 'docs/'
          
  deploy:
    name: Deploy blog
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
      pages: write
      id-token: write
    concurrency:
      group: "pages"
      cancel-in-progress: false
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
