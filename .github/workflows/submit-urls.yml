name: Submit URLs to Search Engines

on:
  workflow_dispatch:
  # schedule: # 如果需要定时运行，请将下面两行取消注释
  #   - cron: "0 18 * * *"

jobs:
  submit:
    name: Submit URLs
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 1. Prepare URL Lists from Live RSS
        id: prepare_urls
        run: |
          echo "Fetching latest RSS feed with cache buster..."
          curl -s "https://www.futuremedia.work/rss.xml?_=$(date +%s)" | grep '<link>' | sed -e 's/.*<link>\(.*\)<\/link>.*/\1/' > master_urls.txt
          
          SUBMITTED_URLS_FILE="backup/submitted_urls.txt"
          mkdir -p backup
          touch $SUBMITTED_URLS_FILE
          
          TO_SUBMIT_FILE="to_submit_urls.txt"
          if [ -s "$SUBMITTED_URLS_FILE" ]; then
            grep -Fxv -f "$SUBMITTED_URLS_FILE" "master_urls.txt" > "$TO_SUBMIT_FILE" || true
          else
            cp "master_urls.txt" "$TO_SUBMIT_FILE"
          fi
          
          echo "--- URLs To Be Submitted in This Run ---"
          cat "$TO_SUBMIT_FILE"
          echo "----------------------------------------"
          echo "url_file=$TO_SUBMIT_FILE" >> $GITHUB_OUTPUT

      - name: 2. Submit to Baidu and Track Success
        id: submit_baidu
        if: steps.prepare_urls.outputs.url_file && hashFiles(steps.prepare_urls.outputs.url_file) != ''
        env:
          BAIDU_TOKEN: ${{ secrets.BAIDU_TOKEN }}
        run: |
          echo "Submitting to Baidu..."
          SUCCESS_FILE="baidu_success.txt"
          URLS_TO_SUBMIT_FILE="baidu_batch.txt"
          shuf -n 2000 ${{ steps.prepare_urls.outputs.url_file }} > $URLS_TO_SUBMIT_FILE
          
          RESPONSE=$(curl -s -H 'Content-Type:text/plain' --data-binary @$URLS_TO_SUBMIT_FILE "http://data.zz.baidu.com/urls?site=https://www.futuremedia.work&token=${{ env.BAIDU_TOKEN }}")
          echo "Baidu API Response: $RESPONSE"
          
          if echo "$RESPONSE" | grep -q '"success"'; then
            cp $URLS_TO_SUBMIT_FILE $SUCCESS_FILE
            echo "Baidu submission successful for this batch."
          fi
          echo "success_file=$SUCCESS_FILE" >> $GITHUB_OUTPUT

      - name: 3. Submit to Bing and Track Success
        id: submit_bing
        if: steps.prepare_urls.outputs.url_file && hashFiles(steps.prepare_urls.outputs.url_file) != ''
        env:
          BING_API_KEY: ${{ secrets.BING_API_KEY }}
        run: |
          echo "Submitting to Bing..."
          SUCCESS_FILE="bing_success.txt"
          touch $SUCCESS_FILE
          URL_LIST=$(shuf -n 10 ${{ steps.prepare_urls.outputs.url_file }})
          
          for url in $URL_LIST; do
            RESPONSE=$(curl -s -X POST -H "Content-Type: application/json; charset=utf-8" --data "{\"siteUrl\":\"https://www.futuremedia.work\",\"url\":\"$url\"}" "https://ssl.bing.com/webmaster/api.svc/json/SubmitUrl?apikey=${{ env.BING_API_KEY }}")
            if echo "$RESPONSE" | grep -q '"d":null' && ! echo "$RESPONSE" | grep -q '"ErrorCode"'; then
              echo "$url" >> $SUCCESS_FILE
            fi
          done
          echo "success_file=$SUCCESS_FILE" >> $GITHUB_OUTPUT

      - name: 4. Authenticate to Google Cloud
        id: auth_google
        if: steps.prepare_urls.outputs.url_file && hashFiles(steps.prepare_urls.outputs.url_file) != ''
        env:
          GOOGLE_API_KEY_JSON: ${{ secrets.GOOGLE_API_KEY_JSON }}
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_API_KEY_JSON }}

      - name: 5. Submit to Google and Track Success
        id: submit_google
        if: steps.auth_google.conclusion == 'success'
        env:
          GCP_SA_EMAIL: ${{ secrets.GCP_SA_EMAIL }}
        run: |
          echo "Submitting to Google..."
          SUCCESS_FILE="google_success.txt"
          touch $SUCCESS_FILE
          URL_LIST=$(shuf -n 100 ${{ steps.prepare_urls.outputs.url_file }})
          
          ACCESS_TOKEN=$(gcloud auth print-access-token --impersonate-service-account="$GCP_SA_EMAIL" --scopes="https://www.googleapis.com/auth/indexing")

          for url in $URL_LIST; do
            RESPONSE=$(curl -s -X POST -H "Authorization: Bearer $ACCESS_TOKEN" -H "Content-Type: application/json" --data "{\"url\":\"$url\",\"type\":\"URL_UPDATED\"}" "https://indexing.googleapis.com/v3/urlNotifications:publish")
            if ! echo "$RESPONSE" | grep -q '"error"'; then
              echo "$url" >> $SUCCESS_FILE
            fi
          done
          echo "success_file=$SUCCESS_FILE" >> $GITHUB_OUTPUT

      - name: 6. Update and Commit Submission History
        if: github.repository == 'granthuang999/granthuang999.github.io'
        run: |
          echo "Updating the history of successfully submitted URLs..."
          
          # 关键修复：将复杂的单行命令分解为更清晰、更稳健的多行脚本
          
          # 1. 创建一个临时文件，用于存放本次所有成功提交的URL
          touch successes_this_run.txt

          # 2. 安全地将每个平台的成功文件内容追加到临时文件中
          if [ -n "$STEPS_SUBMIT_BAIDU_OUTPUTS_SUCCESS_FILE" ] && [ -s "$STEPS_SUBMIT_BAIDU_OUTPUTS_SUCCESS_FILE" ]; then
            cat "$STEPS_SUBMIT_BAIDU_OUTPUTS_SUCCESS_FILE" >> successes_this_run.txt
          fi
          if [ -n "$STEPS_SUBMIT_BING_OUTPUTS_SUCCESS_FILE" ] && [ -s "$STEPS_SUBMIT_BING_OUTPUTS_SUCCESS_FILE" ]; then
            cat "$STEPS_SUBMIT_BING_OUTPUTS_SUCCESS_FILE" >> successes_this_run.txt
          fi
          if [ -n "$STEPS_SUBMIT_GOOGLE_OUTPUTS_SUCCESS_FILE" ] && [ -s "$STEPS_SUBMIT_GOOGLE_OUTPUTS_SUCCESS_FILE" ]; then
            cat "$STEPS_SUBMIT_GOOGLE_OUTPUTS_SUCCESS_FILE" >> successes_this_run.txt
          fi

          # 3. 将本次成功的URL与旧的历史文件合并，并去重
          cat backup/submitted_urls.txt successes_this_run.txt | sort -u > temp_history.txt
          mv temp_history.txt backup/submitted_urls.txt

          # 4. 提交更新后的历史文件
          echo "Committing updated history file to the repository..."
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add backup/submitted_urls.txt
          git diff --quiet --cached --exit-code || git commit -m "📈 Chore: Update successfully submitted URLs history"
          git push
